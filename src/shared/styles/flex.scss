// Utilities
// Prefix for :root CSS variables
$white: #fff !default;
$enable-important-utilities:  true !default;

$variable-prefix: bs- !default; // Deprecated in v5.2.0 for the shorter `$prefix`
$prefix: $variable-prefix !default;

// Gradient
//
// The gradient which is added to components if `$enable-gradients` is `true`
// This gradient is also added to elements with `.bg-gradient`
// scss-docs-start variable-gradient
$gradient: linear-gradient(180deg, rgba($white, 0.15), rgba($white, 0)) !default;
// scss-docs-end variable-gradient

// Spacing
//
// Control the default styling of most Bootstrap elements by modifying these
// variables. Mostly focused on spacing.
// You can add more entries to the $spacers map, should you need more variation.

// scss-docs-start spacer-variables-maps
$spacer: 1rem !default;
$spacers: (
    0: 0,
    1: $spacer * 0.25,
    2: $spacer * 0.5,
    3: $spacer,
    4: $spacer * 1.5,
    5: $spacer * 3
) !default;
// scss-docs-end spacer-variables-maps

// Position
//
// Define the edge positioning anchors of the position utilities.

// scss-docs-start position-map
$position-values: (
    0: 0,
    50: 50%,
    100: 100%
) !default;
// scss-docs-end position-map

$utilities: () !default;
// stylelint-disable-next-line scss/dollar-variable-default
$utilities: map-merge(
    (
        // scss-docs-start utils-vertical-align
        "align":
            (
                property: vertical-align,
                class: align,
                values: baseline top middle bottom text-bottom text-top
            ),
        // scss-docs-end utils-vertical-align
        // scss-docs-start utils-float
        "float":
            (
                responsive: true,
                property: float,
                values: (
                    start: left,
                    end: right,
                    none: none
                )
            ),
        // scss-docs-end utils-float
        // Object Fit utilities
        // scss-docs-start utils-object-fit
        "object-fit":
            (
                responsive: true,
                property: object-fit,
                values: (
                    contain: contain,
                    cover: cover,
                    fill: fill,
                    scale: scale-down,
                    none: none
                )
            ),
        // scss-docs-end utils-object-fit
        // Opacity utilities
        // scss-docs-start utils-opacity
        "opacity":
            (
                property: opacity,
                values: (
                    0: 0,
                    25: 0.25,
                    50: 0.5,
                    75: 0.75,
                    100: 1
                )
            ),
        // scss-docs-end utils-opacity
        // scss-docs-start utils-overflow
        "overflow":
            (
                property: overflow,
                values: auto hidden visible scroll
            ),
        "overflow-x": (
            property: overflow-x,
            values: auto hidden visible scroll
        ),
        "overflow-y": (
            property: overflow-y,
            values: auto hidden visible scroll
        ),
        // scss-docs-end utils-overflow
        // scss-docs-start utils-display
        "display":
            (
                responsive: true,
                print: true,
                property: display,
                class: d,
                values: inline inline-block block grid inline-grid table table-row table-cell flex inline-flex none
            ),
        // scss-docs-end utils-display
        // scss-docs-start utils-shadow
        "shadow":
            (
                property: box-shadow,
                class: shadow,
                values: (
                    null: var(--#{$prefix}box-shadow),
                    sm: var(--#{$prefix}box-shadow-sm),
                    lg: var(--#{$prefix}box-shadow-lg),
                    none: none
                )
            ),
        // scss-docs-end utils-shadow
        // scss-docs-start utils-position
        "position":
            (
                property: position,
                values: static relative absolute fixed sticky
            ),
        "top": (
            property: top,
            values: $position-values
        ),
        "bottom": (
            property: bottom,
            values: $position-values
        ),
        "start": (
            property: left,
            class: start,
            values: $position-values
        ),
        "end": (
            property: right,
            class: end,
            values: $position-values
        ),
        "translate-middle": (
            property: transform,
            class: translate-middle,
            values: (
                null: translate(-50%, -50%),
                x: translateX(-50%),
                y: translateY(-50%)
            )
        ),
        // scss-docs-end utils-position
        // Sizing utilities
        // scss-docs-start utils-sizing
        "width":
            (
                property: width,
                class: w,
                values: (
                    25: 25%,
                    50: 50%,
                    75: 75%,
                    100: 100%,
                    auto: auto
                )
            ),
        "max-width": (
            property: max-width,
            class: mw,
            values: (
                100: 100%
            )
        ),
        "viewport-width": (
            property: width,
            class: vw,
            values: (
                100: 100vw
            )
        ),
        "min-viewport-width": (
            property: min-width,
            class: min-vw,
            values: (
                100: 100vw
            )
        ),
        "height": (
            property: height,
            class: h,
            values: (
                25: 25%,
                50: 50%,
                75: 75%,
                100: 100%,
                auto: auto
            )
        ),
        "max-height": (
            property: max-height,
            class: mh,
            values: (
                100: 100%
            )
        ),
        "viewport-height": (
            property: height,
            class: vh,
            values: (
                100: 100vh
            )
        ),
        "min-viewport-height": (
            property: min-height,
            class: min-vh,
            values: (
                100: 100vh
            )
        ),
        // scss-docs-end utils-sizing
        // Flex utilities
        // scss-docs-start utils-flex
        "flex":
            (
                responsive: true,
                property: flex,
                values: (
                    fill: 1 1 auto
                )
            ),
        "flex-direction": (
            responsive: true,
            property: flex-direction,
            class: flex,
            values: row column row-reverse column-reverse
        ),
        "flex-grow": (
            responsive: true,
            property: flex-grow,
            class: flex,
            values: (
                grow-0: 0,
                grow-1: 1
            )
        ),
        "flex-shrink": (
            responsive: true,
            property: flex-shrink,
            class: flex,
            values: (
                shrink-0: 0,
                shrink-1: 1
            )
        ),
        "flex-wrap": (
            responsive: true,
            property: flex-wrap,
            class: flex,
            values: wrap nowrap wrap-reverse
        ),
        "justify-content": (
            responsive: true,
            property: justify-content,
            values: (
                start: flex-start,
                end: flex-end,
                center: center,
                between: space-between,
                around: space-around,
                evenly: space-evenly
            )
        ),
        "align-items": (
            responsive: true,
            property: align-items,
            values: (
                start: flex-start,
                end: flex-end,
                center: center,
                baseline: baseline,
                stretch: stretch
            )
        ),
        "align-content": (
            responsive: true,
            property: align-content,
            values: (
                start: flex-start,
                end: flex-end,
                center: center,
                between: space-between,
                around: space-around,
                stretch: stretch
            )
        ),
        "align-self": (
            responsive: true,
            property: align-self,
            values: (
                auto: auto,
                start: flex-start,
                end: flex-end,
                center: center,
                baseline: baseline,
                stretch: stretch
            )
        ),
        "order": (
            responsive: true,
            property: order,
            values: (
                first: -1,
                0: 0,
                1: 1,
                2: 2,
                3: 3,
                4: 4,
                5: 5,
                last: 6
            )
        ),
        // scss-docs-end utils-flex
        // Margin utilities
        // scss-docs-start utils-spacing
        "margin":
            (
                responsive: true,
                property: margin,
                class: m,
                values:
                    map-merge(
                        $spacers,
                        (
                            auto: auto
                        )
                    )
            ),
        "margin-x": (
            responsive: true,
            property: margin-right margin-left,
            class: mx,
            values:
                map-merge(
                    $spacers,
                    (
                        auto: auto
                    )
                )
        ),
        "margin-y": (
            responsive: true,
            property: margin-top margin-bottom,
            class: my,
            values:
                map-merge(
                    $spacers,
                    (
                        auto: auto
                    )
                )
        ),
        "margin-top": (
            responsive: true,
            property: margin-top,
            class: mt,
            values:
                map-merge(
                    $spacers,
                    (
                        auto: auto
                    )
                )
        ),
        "margin-end": (
            responsive: true,
            property: margin-right,
            class: me,
            values:
                map-merge(
                    $spacers,
                    (
                        auto: auto
                    )
                )
        ),
        "margin-bottom": (
            responsive: true,
            property: margin-bottom,
            class: mb,
            values:
                map-merge(
                    $spacers,
                    (
                        auto: auto
                    )
                )
        ),
        "margin-start": (
            responsive: true,
            property: margin-left,
            class: ms,
            values:
                map-merge(
                    $spacers,
                    (
                        auto: auto
                    )
                )
        ),

        // Padding utilities
        "padding":
            (
                responsive: true,
                property: padding,
                class: p,
                values: $spacers
            ),
        "padding-x": (
            responsive: true,
            property: padding-right padding-left,
            class: px,
            values: $spacers
        ),
        "padding-y": (
            responsive: true,
            property: padding-top padding-bottom,
            class: py,
            values: $spacers
        ),
        "padding-top": (
            responsive: true,
            property: padding-top,
            class: pt,
            values: $spacers
        ),
        "padding-end": (
            responsive: true,
            property: padding-right,
            class: pe,
            values: $spacers
        ),
        "padding-bottom": (
            responsive: true,
            property: padding-bottom,
            class: pb,
            values: $spacers
        ),
        "padding-start": (
            responsive: true,
            property: padding-left,
            class: ps,
            values: $spacers
        ),
        // Gap utility
        "gap":
            (
                responsive: true,
                property: gap,
                class: gap,
                values: $spacers
            ),
        "row-gap": (
            responsive: true,
            property: row-gap,
            class: row-gap,
            values: $spacers
        ),
        "column-gap": (
            responsive: true,
            property: column-gap,
            class: column-gap,
            values: $spacers
        ),
        // scss-docs-end utils-spacing
        // scss-docs-start utils-visibility
        "visibility":
            (
                property: visibility,
                class: null,
                values: (
                    visible: visible,
                    invisible: hidden
                )
            ),
        // scss-docs-end utils-visibility
    ),
    $utilities
);

// Utility generator
// Used to generate utilities & print utilities
@mixin generate-utility($utility, $infix: "", $is-rfs-media-query: false) {
    $values: map-get($utility, values);

    // If the values are a list or string, convert it into a map
    @if type-of($values) == "string" or type-of(nth($values, 1)) != "list" {
        $values: zip($values, $values);
    }

    @each $key, $value in $values {
        $properties: map-get($utility, property);

        // Multiple properties are possible, for example with vertical or horizontal margins or paddings
        @if type-of($properties) == "string" {
            $properties: append((), $properties);
        }

        // Use custom class if present
        $property-class: if(map-has-key($utility, class), map-get($utility, class), nth($properties, 1));
        $property-class: if($property-class == null, "", $property-class);

        // Use custom CSS variable name if present, otherwise default to `class`
        $css-variable-name: if(
            map-has-key($utility, css-variable-name),
            map-get($utility, css-variable-name),
            map-get($utility, class)
        );

        // State params to generate pseudo-classes
        $state: if(map-has-key($utility, state), map-get($utility, state), ());

        $infix: if($property-class == "" and str-slice($infix, 1, 1) == "-", str-slice($infix, 2), $infix);

        // Don't prefix if value key is null (e.g. with shadow class)
        $property-class-modifier: if($key, if($property-class == "" and $infix == "", "", "-") + $key, "");

        @if map-get($utility, rfs) {
            // Inside the media query
            @if $is-rfs-media-query {
                $val: rfs-value($value);

                // Do not render anything if fluid and non fluid values are the same
                $value: if($val == rfs-fluid-value($value), null, $val);
            } @else {
                $value: rfs-fluid-value($value);
            }
        }

        $is-css-var: map-get($utility, css-var);
        $is-local-vars: map-get($utility, local-vars);
        $is-rtl: map-get($utility, rtl);

        @if $value != null {
            @if $is-rtl == false {
                /* rtl:begin:remove */
            }

            @if $is-css-var {
                .#{$property-class + $infix + $property-class-modifier} {
                    --#{$prefix}#{$css-variable-name}: #{$value};
                }

                @each $pseudo in $state {
                    .#{$property-class + $infix + $property-class-modifier}-#{$pseudo}:#{$pseudo} {
                        --#{$prefix}#{$css-variable-name}: #{$value};
                    }
                }
            } @else {
                .#{$property-class + $infix + $property-class-modifier} {
                    @each $property in $properties {
                        @if $is-local-vars {
                            @each $local-var, $variable in $is-local-vars {
                                --#{$prefix}#{$local-var}: #{$variable};
                            }
                        }
                        #{$property}: $value if($enable-important-utilities, !important, null);
                    }
                }

                @each $pseudo in $state {
                    .#{$property-class + $infix + $property-class-modifier}-#{$pseudo}:#{$pseudo} {
                        @each $property in $properties {
                            @if $is-local-vars {
                                @each $local-var, $variable in $is-local-vars {
                                    --#{$prefix}#{$local-var}: #{$variable};
                                }
                            }
                            #{$property}: $value if($enable-important-utilities, !important, null);
                        }
                    }
                }
            }

            @if $is-rtl == false {
                /* rtl:end:remove */
            }
        }
    }
}
// Loop over each utility property
@each $key, $utility in $utilities {
    // The utility can be disabled with `false`, thus check if the utility is a map first
    // Only proceed if responsive media queries are enabled or if it's the base media query
    @if type-of($utility) == "map" and (map-get($utility, responsive)) {
        @include generate-utility($utility);
    }
}
